'use strict';

var defaultsDeep = require('lodash/defaultsDeep');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var defaultsDeep__default = /*#__PURE__*/_interopDefaultLegacy(defaultsDeep);

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var DefaultOptions = {
  modules: ['DisplaySize', 'Toolbar', 'Resize', 'AltAttribute'],
  overlayStyles: {
    position: 'absolute',
    boxSizing: 'border-box',
    border: '1px dashed #444'
  },
  handleStyles: {
    position: 'absolute',
    height: '12px',
    width: '12px',
    backgroundColor: 'white',
    border: '1px solid #777',
    boxSizing: 'border-box',
    opacity: '0.80'
  },
  displayStyles: {
    position: 'absolute',
    font: '12px/1.0 Arial, Helvetica, sans-serif',
    padding: '4px 8px',
    textAlign: 'center',
    backgroundColor: 'white',
    color: '#333',
    border: '1px solid #777',
    boxSizing: 'border-box',
    opacity: '0.80',
    cursor: 'default'
  },
  toolbarStyles: {
    position: 'absolute',
    top: '-12px',
    right: '0',
    left: '0',
    height: '0',
    minWidth: '100px',
    font: '12px/1.0 Arial, Helvetica, sans-serif',
    textAlign: 'center',
    color: '#333',
    boxSizing: 'border-box',
    cursor: 'default'
  },
  toolbarButtonStyles: {
    display: 'inline-block',
    width: '24px',
    height: '24px',
    background: 'white',
    border: '1px solid #999',
    verticalAlign: 'middle'
  },
  toolbarButtonSvgStyles: {
    fill: '#444',
    stroke: '#444',
    strokeWidth: '2'
  }
};

var BaseModule = function BaseModule(resizer) {
  _classCallCheck(this, BaseModule);

  _defineProperty(this, "onCreate", function () {});

  _defineProperty(this, "onDestroy", function () {});

  _defineProperty(this, "onUpdate", function () {});

  this.overlay = resizer.overlay;
  this.img = resizer.img;
  this.options = resizer.options;
  this.requestUpdate = resizer.onUpdate;
}
/*
      requestUpdate (passed in by the library during construction, above) can be used to let the library know that
      you've changed something about the image that would require re-calculating the overlay (and all of its child
      elements)
       For example, if you add a margin to the element, you'll want to call this or else all the controls will be
      misaligned on-screen.
   */

/*
      onCreate will be called when the element is clicked on
       If the module has any user controls, it should create any containers that it'll need here.
      The overlay has absolute positioning, and will be automatically repositioned and resized as needed, so you can
      use your own absolute positioning and the 'top', 'right', etc. styles to be positioned relative to the element
      on-screen.
   */
;

var DisplaySize = /*#__PURE__*/function (_BaseModule) {
  _inherits(DisplaySize, _BaseModule);

  var _super = _createSuper(DisplaySize);

  function DisplaySize() {
    var _this;

    _classCallCheck(this, DisplaySize);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onCreate", function () {
      // Create the container to hold the size display
      _this.display = document.createElement('div'); // Apply styles

      Object.assign(_this.display.style, _this.options.displayStyles); // Attach it

      _this.overlay.appendChild(_this.display);
    });

    _defineProperty(_assertThisInitialized(_this), "onDestroy", function () {});

    _defineProperty(_assertThisInitialized(_this), "onUpdate", function () {
      if (!_this.display || !_this.img) {
        return;
      }

      var size = _this.getCurrentSize();

      _this.display.innerHTML = size.join(' &times; ');

      if (size[0] > 120 && size[1] > 30) {
        // position on top of image
        Object.assign(_this.display.style, {
          right: '4px',
          bottom: '4px',
          left: 'auto'
        });
      } else if (_this.img.style["float"] == 'right') {
        // position off bottom left
        var dispRect = _this.display.getBoundingClientRect();

        Object.assign(_this.display.style, {
          right: 'auto',
          bottom: '0px',
          left: "-".concat(dispRect.width + 4, "px")
        });
      } else {
        // position off bottom right
        var _dispRect = _this.display.getBoundingClientRect();

        Object.assign(_this.display.style, {
          right: "-".concat(_dispRect.width + 8, "px"),
          bottom: '0px',
          left: 'auto'
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getCurrentSize", function () {
      return [_this.img.width, Math.round(_this.img.width / _this.img.naturalWidth * _this.img.naturalHeight)];
    });

    return _this;
  }

  return DisplaySize;
}(BaseModule);

var IconAlignLeft = "<svg viewbox=\"0 0 18 18\">\n  <line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"9\" y2=\"9\"></line>\n  <line class=\"ql-stroke\" x1=\"3\" x2=\"13\" y1=\"14\" y2=\"14\"></line>\n  <line class=\"ql-stroke\" x1=\"3\" x2=\"9\" y1=\"4\" y2=\"4\"></line>\n</svg>";

var IconAlignCenter = "<svg viewbox=\"0 0 18 18\">\n  <line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"></line>\n  <line class=\"ql-stroke\" x1=\"14\" x2=\"4\" y1=\"14\" y2=\"14\"></line>\n  <line class=\"ql-stroke\" x1=\"12\" x2=\"6\" y1=\"4\" y2=\"4\"></line>\n</svg>";

var IconAlignRight = "<svg viewbox=\"0 0 18 18\">\n  <line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"></line>\n  <line class=\"ql-stroke\" x1=\"15\" x2=\"5\" y1=\"14\" y2=\"14\"></line>\n  <line class=\"ql-stroke\" x1=\"15\" x2=\"9\" y1=\"4\" y2=\"4\"></line>\n</svg>";

var Parchment = {};
var FloatStyle = {};
var MarginStyle = {};
var DisplayStyle = {};
var Toolbar = /*#__PURE__*/function (_BaseModule) {
  _inherits(Toolbar, _BaseModule);

  var _super = _createSuper(Toolbar);

  function Toolbar() {
    var _this;

    _classCallCheck(this, Toolbar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onCreate", function (parchment) {
      // Initilize styles
      Parchment = parchment;
      FloatStyle = new Parchment.Attributor.Style('float', 'float');
      MarginStyle = new Parchment.Attributor.Style('margin', 'margin');
      DisplayStyle = new Parchment.Attributor.Style('display', 'display'); // Setup Toolbar

      _this.toolbar = document.createElement('div');
      Object.assign(_this.toolbar.style, _this.options.toolbarStyles);

      _this.overlay.appendChild(_this.toolbar); // Setup Buttons


      _this._defineAlignments();

      _this._addToolbarButtons();
    });

    _defineProperty(_assertThisInitialized(_this), "onDestroy", function () {});

    _defineProperty(_assertThisInitialized(_this), "onUpdate", function () {});

    _defineProperty(_assertThisInitialized(_this), "_defineAlignments", function () {
      _this.alignments = [{
        icon: IconAlignLeft,
        apply: function apply() {
          DisplayStyle.add(_this.img, 'inline');
          FloatStyle.add(_this.img, 'left');
          MarginStyle.add(_this.img, '0 1em 1em 0');
        },
        isApplied: function isApplied() {
          return FloatStyle.value(_this.img) == 'left';
        }
      }, {
        icon: IconAlignCenter,
        apply: function apply() {
          DisplayStyle.add(_this.img, 'block');
          FloatStyle.remove(_this.img);
          MarginStyle.add(_this.img, 'auto');
        },
        isApplied: function isApplied() {
          return MarginStyle.value(_this.img) == 'auto';
        }
      }, {
        icon: IconAlignRight,
        apply: function apply() {
          DisplayStyle.add(_this.img, 'inline');
          FloatStyle.add(_this.img, 'right');
          MarginStyle.add(_this.img, '0 0 1em 1em');
        },
        isApplied: function isApplied() {
          return FloatStyle.value(_this.img) == 'right';
        }
      }];
    });

    _defineProperty(_assertThisInitialized(_this), "_addToolbarButtons", function () {
      var buttons = [];

      _this.alignments.forEach(function (alignment, idx) {
        var button = document.createElement('span');
        buttons.push(button);
        button.innerHTML = alignment.icon;
        button.addEventListener('click', function () {
          // deselect all buttons
          buttons.forEach(function (button) {
            return button.style.filter = '';
          });

          if (alignment.isApplied()) {
            // If applied, unapply
            FloatStyle.remove(_this.img);
            MarginStyle.remove(_this.img);
            DisplayStyle.remove(_this.img);
          } else {
            // otherwise, select button and apply
            _this._selectButton(button);

            alignment.apply();
          } // image may change position; redraw drag handles


          _this.requestUpdate();
        });
        Object.assign(button.style, _this.options.toolbarButtonStyles);

        if (idx > 0) {
          button.style.borderLeftWidth = '0';
        }

        Object.assign(button.children[0].style, _this.options.toolbarButtonSvgStyles);

        if (alignment.isApplied()) {
          // select button if previously applied
          _this._selectButton(button);
        }

        _this.toolbar.appendChild(button);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "_selectButton", function (button) {
      button.style.filter = 'invert(20%)';
    });

    return _this;
  }

  return Toolbar;
}(BaseModule);

var Resize = /*#__PURE__*/function (_BaseModule) {
  _inherits(Resize, _BaseModule);

  var _super = _createSuper(Resize);

  function Resize() {
    var _this;

    _classCallCheck(this, Resize);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onCreate", function () {
      // track resize handles
      _this.boxes = []; // add 4 resize handles

      _this.addBox('nwse-resize'); // top left


      _this.addBox('nesw-resize'); // top right


      _this.addBox('nwse-resize'); // bottom right


      _this.addBox('nesw-resize'); // bottom left


      _this.positionBoxes();
    });

    _defineProperty(_assertThisInitialized(_this), "onDestroy", function () {
      // reset drag handle cursors
      _this.setCursor('');
    });

    _defineProperty(_assertThisInitialized(_this), "positionBoxes", function () {
      var handleXOffset = "".concat(-parseFloat(_this.options.handleStyles.width) / 2, "px");
      var handleYOffset = "".concat(-parseFloat(_this.options.handleStyles.height) / 2, "px") // set the top and left for each drag handle
      ;
      [{
        left: handleXOffset,
        top: handleYOffset
      }, // top left
      {
        right: handleXOffset,
        top: handleYOffset
      }, // top right
      {
        right: handleXOffset,
        bottom: handleYOffset
      }, // bottom right
      {
        left: handleXOffset,
        bottom: handleYOffset
      } // bottom left
      ].forEach(function (pos, idx) {
        Object.assign(_this.boxes[idx].style, pos);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "addBox", function (cursor) {
      // create div element for resize handle
      var box = document.createElement('div'); // Star with the specified styles

      Object.assign(box.style, _this.options.handleStyles);
      box.style.cursor = cursor; // Set the width/height to use 'px'

      box.style.width = "".concat(_this.options.handleStyles.width, "px");
      box.style.height = "".concat(_this.options.handleStyles.height, "px"); // listen for mousedown on each box

      box.addEventListener('mousedown', _this.handleMousedown, false); // add drag handle to document

      _this.overlay.appendChild(box); // keep track of drag handle


      _this.boxes.push(box);
    });

    _defineProperty(_assertThisInitialized(_this), "handleMousedown", function (evt) {
      // note which box
      _this.dragBox = evt.target; // note starting mousedown position

      _this.dragStartX = evt.clientX; // store the width before the drag

      _this.preDragWidth = _this.img.width || _this.img.naturalWidth; // set the proper cursor everywhere

      _this.setCursor(_this.dragBox.style.cursor); // listen for movement and mouseup


      document.addEventListener('mousemove', _this.handleDrag, false);
      document.addEventListener('mouseup', _this.handleMouseup, false);
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseup", function () {
      // reset cursor everywhere
      _this.setCursor(''); // stop listening for movement and mouseup


      document.removeEventListener('mousemove', _this.handleDrag);
      document.removeEventListener('mouseup', _this.handleMouseup);
    });

    _defineProperty(_assertThisInitialized(_this), "handleDrag", function (evt) {
      if (!_this.img) {
        // image not set yet
        return;
      } // update image size


      var deltaX = evt.clientX - _this.dragStartX;

      if (_this.dragBox === _this.boxes[0] || _this.dragBox === _this.boxes[3]) {
        // left-side resize handler; dragging right shrinks image
        _this.img.width = Math.round(_this.preDragWidth - deltaX);
      } else {
        // right-side resize handler; dragging right enlarges image
        _this.img.width = Math.round(_this.preDragWidth + deltaX);
      }

      _this.requestUpdate();
    });

    _defineProperty(_assertThisInitialized(_this), "setCursor", function (value) {
      [document.body, _this.img].forEach(function (el) {
        el.style.cursor = value; // eslint-disable-line no-param-reassign
      });
    });

    return _this;
  }

  return Resize;
}(BaseModule);

var AltAttribute = /*#__PURE__*/function (_BaseModule) {
  _inherits(AltAttribute, _BaseModule);

  var _super = _createSuper(AltAttribute);

  function AltAttribute() {
    var _this;

    _classCallCheck(this, AltAttribute);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onCreate", function () {
      // Create the container to hold the input element
      _this.display = document.createElement('div'); // Apply styles

      Object.assign(_this.display.style, _this.options.displayStyles); // Attach it

      _this.overlay.appendChild(_this.display); // ALT input


      _this.altInput = document.createElement('input');

      if (_this.img.alt) {
        // Set default value into the input
        _this.altInput.value = _this.img.alt;
      }

      _this.altInput.addEventListener('input', _this.onAltInputChange);

      _this.display.insertAdjacentHTML('beforeend', 'Alt: ');

      _this.display.appendChild(_this.altInput);
    });

    _defineProperty(_assertThisInitialized(_this), "onAltInputChange", function (e) {
      _this.img.alt = e.target.value;
      _this.img.title = e.target.value;
    });

    _defineProperty(_assertThisInitialized(_this), "onDestroy", function () {
      _this.altInput.removeEventListener('input', _this.onAltInputChange);
    });

    _defineProperty(_assertThisInitialized(_this), "onUpdate", function () {
      if (!_this.display || !_this.img) {
        return;
      }

      Object.assign(_this.display.style, {
        right: 'auto',
        bottom: '-40px',
        left: '8px',
        'min-width': '172px'
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getCurrentSize", function () {
      return [_this.img.width, Math.round(_this.img.width / _this.img.naturalWidth * _this.img.naturalHeight)];
    });

    return _this;
  }

  return AltAttribute;
}(BaseModule);

var knownModules = {
  DisplaySize: DisplaySize,
  Toolbar: Toolbar,
  Resize: Resize,
  AltAttribute: AltAttribute
};
/**
 * Custom module for quilljs to allow user to resize <img> elements
 * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)
 * @see https://quilljs.com/blog/building-a-custom-module/
 */

var ImageResize = function ImageResize(quill) {
  var _this = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  _classCallCheck(this, ImageResize);

  _defineProperty(this, "initializeModules", function () {
    _this.removeModules();

    _this.modules = _this.moduleClasses.map(function (ModuleClass) {
      return new (knownModules[ModuleClass] || ModuleClass)(_this);
    });

    _this.modules.forEach(function (module) {
      module.onCreate(_this.parchment);
    });

    _this.onUpdate();
  });

  _defineProperty(this, "onUpdate", function () {
    _this.repositionElements();

    _this.modules.forEach(function (module) {
      module.onUpdate();
    });
  });

  _defineProperty(this, "removeModules", function () {
    _this.modules.forEach(function (module) {
      module.onDestroy();
    });

    _this.modules = [];
  });

  _defineProperty(this, "handleClick", function (evt) {
    if (evt.target && evt.target.tagName && evt.target.tagName.toUpperCase() === 'IMG') {
      if (_this.img === evt.target) {
        // we are already focused on this image
        return;
      }

      if (_this.img) {
        // we were just focused on another image
        _this.hide();
      } // clicked on an image inside the editor


      _this.show(evt.target);
    } else if (_this.img) {
      // clicked on a non image
      _this.hide();
    }
  });

  _defineProperty(this, "show", function (img) {
    // keep track of this img element
    _this.img = img;

    _this.showOverlay();

    _this.initializeModules();
  });

  _defineProperty(this, "showOverlay", function () {
    if (_this.overlay) {
      _this.hideOverlay();
    }

    _this.quill.setSelection(null); // prevent spurious text selection


    _this.setUserSelect('none'); // listen for the image being deleted or moved


    document.addEventListener('keyup', _this.checkImage, true);

    _this.quill.root.addEventListener('input', _this.checkImage, true); // Create and add the overlay


    _this.overlay = document.createElement('div');
    Object.assign(_this.overlay.style, _this.options.overlayStyles);

    _this.quill.root.parentNode.appendChild(_this.overlay);

    _this.repositionElements();
  });

  _defineProperty(this, "hideOverlay", function () {
    if (!_this.overlay) {
      return;
    } // Remove the overlay


    _this.quill.root.parentNode.removeChild(_this.overlay);

    _this.overlay = undefined; // stop listening for image deletion or movement

    document.removeEventListener('keyup', _this.checkImage);

    _this.quill.root.removeEventListener('input', _this.checkImage); // reset user-select


    _this.setUserSelect('');
  });

  _defineProperty(this, "repositionElements", function () {
    if (!_this.overlay || !_this.img) {
      return;
    } // position the overlay over the image


    var parent = _this.quill.root.parentNode;

    var imgRect = _this.img.getBoundingClientRect();

    var containerRect = parent.getBoundingClientRect();
    Object.assign(_this.overlay.style, {
      left: "".concat(imgRect.left - containerRect.left - 1 + parent.scrollLeft, "px"),
      top: "".concat(imgRect.top - containerRect.top + parent.scrollTop, "px"),
      width: "".concat(imgRect.width, "px"),
      height: "".concat(imgRect.height, "px")
    });
  });

  _defineProperty(this, "hide", function () {
    _this.hideOverlay();

    _this.removeModules();

    _this.img = undefined;
  });

  _defineProperty(this, "setUserSelect", function (value) {
    ['userSelect', 'mozUserSelect', 'webkitUserSelect', 'msUserSelect'].forEach(function (prop) {
      // set on contenteditable element and <html>
      _this.quill.root.style[prop] = value;
      document.documentElement.style[prop] = value;
    });
  });

  _defineProperty(this, "checkImage", function (evt) {
    if (_this.img) {
      if (document.activeElement.tagName === 'BODY' && (evt.code === 46 || evt.code === 8 || evt.keyCode === 46 || evt.keyCode === 8)) {
        var imageNode = window.Quill.find(_this.img);

        if (imageNode) {
          imageNode.deleteAt(0);
        }

        _this.hide();
      }
    }
  });

  // save the quill reference and options
  this.quill = quill; // Apply the options to our defaults, and stash them for later
  // defaultsDeep doesn't do arrays as you'd expect, so we'll need to apply the classes array from options separately

  var moduleClasses = false;

  if (options.modules) {
    moduleClasses = options.modules.slice();
  }

  if (options.parchment) {
    this.parchment = options.parchment;
  } // Apply options to default options


  this.options = defaultsDeep__default['default']({}, options, DefaultOptions); // (see above about moduleClasses)

  if (moduleClasses !== false) {
    this.options.modules = moduleClasses;
  } // disable native image resizing on firefox


  document.execCommand('enableObjectResizing', false, 'false'); // respond to clicks inside the editor

  this.quill.root.addEventListener('click', this.handleClick, false);
  this.quill.root.parentNode.style.position = this.quill.root.parentNode.style.position || 'relative'; // setup modules

  this.moduleClasses = this.options.modules;
  this.modules = [];
};

module.exports = ImageResize;
//# sourceMappingURL=ImageResize.cjs.js.map
