"use strict";exports.__esModule=true;exports.findPageFile=findPageFile;var _path=require("path");var _chalk=_interopRequireDefault(require("chalk"));var _log=require("../../build/output/log");var _fs=require("fs");var _normalizePagePath=require("../../next-server/server/normalize-page-path");var _recursiveReaddir=require("../../lib/recursive-readdir");var _utils=require("../../build/utils");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// import { fileExists } from '../../lib/file-exists'
async function isTrueCasePagePath(pagePath,pagesDir){const pageSegments=(0,_path.normalize)(pagePath).split(_path.sep).filter(Boolean);const segmentExistsPromises=pageSegments.map(async(segment,i)=>{const segmentParentDir=(0,_path.join)(pagesDir,...pageSegments.slice(0,i));const parentDirEntries=await _fs.promises.readdir(segmentParentDir);return parentDirEntries.includes(segment);});return(await Promise.all(segmentExistsPromises)).every(Boolean);}async function findPageFile(rootDir,normalizedPagePath,pageExtensions){const page=(0,_normalizePagePath.denormalizePagePath)(normalizedPagePath);// console.log('[findPageFile]', { rootDir, normalizedPagePath, page })
const allPages=await(0,_recursiveReaddir.recursiveFindPages)(rootDir,(0,_utils.buildPageExtensionRegex)(pageExtensions));// console.log('allPages', allPages)
let prefix;if(normalizedPagePath.startsWith('/api/')){prefix='';}else{prefix='/pages';}let nameMatch;if(page==='/'){nameMatch=normalizedPagePath;}else if(page.endsWith('/index')){nameMatch=`${page}/index`;}else{nameMatch=`(${page}|${page}/index)`;}// Make the regex work for dynamic routes like [...auth].ts
nameMatch=nameMatch.replace(/[[\]\\]/g,'\\$&');const foundPagePaths=allPages.filter(path=>(0,_normalizePagePath.normalizePathSep)(path).match(new RegExp(`${prefix}${nameMatch}\\.(?:${pageExtensions.join('|')})$`)));// console.log(
//   new RegExp(`${prefix}${nameMatch}\\.(?:${pageExtensions.join('|')})$`)
// )
// console.log('FOUND', foundPagePaths)
// for (const extension of pageExtensions) {
//   if (!normalizedPagePath.endsWith('/index')) {
//     const relativePagePath = `${page}.${extension}`
//     const pagePath = join(rootDir, relativePagePath)
//
//     if (await fileExists(pagePath)) {
//       foundPagePaths.push(relativePagePath)
//     }
//   }
//
//   const relativePagePathWithIndex = join(page, `index.${extension}`)
//   const pagePathWithIndex = join(rootDir, relativePagePathWithIndex)
//   if (await fileExists(pagePathWithIndex)) {
//     foundPagePaths.push(relativePagePathWithIndex)
//   }
// }
if(foundPagePaths.length<1){return null;}if(!(await isTrueCasePagePath(foundPagePaths[0],rootDir))){return null;}if(foundPagePaths.length>1){(0,_log.warn)(`Duplicate page detected. ${_chalk.default.cyan((0,_path.join)('pages',foundPagePaths[0]))} and ${_chalk.default.cyan((0,_path.join)('pages',foundPagePaths[1]))} both resolve to ${_chalk.default.cyan(normalizedPagePath)}.`);}return foundPagePaths[0];}
//# sourceMappingURL=find-page-file.js.map