
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.29.1
 * Query Engine version: 1be4cd60b89afa04b192acb1ef47758a39810f3a
 */
Prisma.prismaVersion = {
  client: "2.29.1",
  engine: "1be4cd60b89afa04b192acb1ef47758a39810f3a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  email: 'email',
  hashedPassword: 'hashedPassword',
  userDescription: 'userDescription',
  lien: 'lien',
  getNotifications: 'getNotifications',
  isActive: 'isActive',
  emailIsVerified: 'emailIsVerified',
  bio: 'bio',
  role: 'role',
  avatar: 'avatar',
  isPublic: 'isPublic',
  userLat: 'userLat',
  userLon: 'userLon',
  ip: 'ip'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  handle: 'handle',
  hashedSessionToken: 'hashedSessionToken',
  antiCSRFToken: 'antiCSRFToken',
  publicData: 'publicData',
  privateData: 'privateData',
  name: 'name',
  userId: 'userId',
  emailIsVerified: 'emailIsVerified'
});

exports.Prisma.BannedIpScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  ip: 'ip'
});

exports.Prisma.MainPageScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usesEditor: 'usesEditor',
  maincontent: 'maincontent'
});

exports.Prisma.ApostScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  content: 'content',
  userId: 'userId'
});

exports.Prisma.AreplyScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  content: 'content',
  number: 'number',
  userId: 'userId',
  apostId: 'apostId'
});

exports.Prisma.FaqScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subject: 'subject',
  content: 'content',
  orderSubject: 'orderSubject'
});

exports.Prisma.TokenScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hashedToken: 'hashedToken',
  type: 'type',
  expiresAt: 'expiresAt',
  sentTo: 'sentTo',
  userId: 'userId'
});

exports.Prisma.TokenMailVerificationScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hashedToken: 'hashedToken',
  type: 'type',
  expiresAt: 'expiresAt',
  sentTo: 'sentTo',
  hashedPassword: 'hashedPassword',
  name: 'name'
});

exports.Prisma.ImageScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  asset_id: 'asset_id',
  url: 'url'
});

exports.Prisma.TeamScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  corpus: 'corpus',
  anneeCreation: 'anneeCreation',
  secteur: 'secteur',
  typeOrg: 'typeOrg',
  taille: 'taille',
  teamLatitude: 'teamLatitude',
  teamLongitude: 'teamLongitude',
  image: 'image',
  imageCover: 'imageCover',
  TeamMastersID: 'TeamMastersID',
  TeamMemberId: 'TeamMemberId',
  public: 'public',
  findIndex: 'findIndex',
  publishDemand: 'publishDemand'
});

exports.Prisma.TagScalarFieldEnum = makeEnum({
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  isPublic: 'isPublic',
  catSpecific: 'catSpecific'
});

exports.Prisma.TeamFollowerScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teamId: 'teamId',
  followerId: 'followerId'
});

exports.Prisma.TpostScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  content: 'content',
  number: 'number',
  teamId: 'teamId',
  userId: 'userId'
});

exports.Prisma.TeventScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subject: 'subject',
  startAt: 'startAt',
  endsAt: 'endsAt',
  content: 'content',
  maxParticipants: 'maxParticipants',
  teamId: 'teamId',
  userId: 'userId',
  eventLat: 'eventLat',
  eventLon: 'eventLon',
  locationDescription: 'locationDescription',
  visioPres: 'visioPres',
  linkVisio: 'linkVisio',
  visioCode: 'visioCode',
  infoPostscritum: 'infoPostscritum',
  isCancel: 'isCancel',
  visible: 'visible',
  postScriptWriterId: 'postScriptWriterId',
  recallEmailSent: 'recallEmailSent'
});

exports.Prisma.UserParticipeEventScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teventId: 'teventId',
  participantId: 'participantId'
});

exports.Prisma.EreplyScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  content: 'content',
  number: 'number',
  teventId: 'teventId',
  teamId: 'teamId',
  userId: 'userId'
});

exports.Prisma.TreplyScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  content: 'content',
  number: 'number',
  tpostId: 'tpostId',
  teamId: 'teamId',
  userId: 'userId'
});

exports.Prisma.MessageScalarFieldEnum = makeEnum({
  id: 'id',
  sentAt: 'sentAt',
  content: 'content',
  htmlContent: 'htmlContent',
  sentFromId: 'sentFromId',
  sentToId: 'sentToId',
  sentInId: 'sentInId'
});

exports.Prisma.SignalAdminScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  content: 'content',
  isTreated: 'isTreated',
  chatId: 'chatId',
  subject: 'subject',
  userId: 'userId'
});

exports.Prisma.ChatScalarFieldEnum = makeEnum({
  id: 'id',
  subject: 'subject',
  private: 'private',
  IsDeletedByAdmin: 'IsDeletedByAdmin'
});

exports.Prisma.AdminMessageScalarFieldEnum = makeEnum({
  id: 'id',
  sentAt: 'sentAt',
  content: 'content',
  htmlContent: 'htmlContent',
  sentInId: 'sentInId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Session: 'Session',
  BannedIp: 'BannedIp',
  MainPage: 'MainPage',
  Apost: 'Apost',
  Areply: 'Areply',
  Faq: 'Faq',
  Token: 'Token',
  TokenMailVerification: 'TokenMailVerification',
  Image: 'Image',
  Team: 'Team',
  Tag: 'Tag',
  TeamFollower: 'TeamFollower',
  Tpost: 'Tpost',
  Tevent: 'Tevent',
  UserParticipeEvent: 'UserParticipeEvent',
  Ereply: 'Ereply',
  Treply: 'Treply',
  Message: 'Message',
  SignalAdmin: 'SignalAdmin',
  Chat: 'Chat',
  AdminMessage: 'AdminMessage'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
