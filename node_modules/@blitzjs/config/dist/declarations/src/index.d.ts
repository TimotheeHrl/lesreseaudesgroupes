import { NextConfig } from "next/dist/next-server/server/config";
declare type NextExperimental = NextConfig["experimental"];
interface Experimental extends NextExperimental {
    isomorphicResolverImports?: boolean;
}
export interface BlitzConfig extends Omit<NextConfig, "experimental" | "future"> {
    target?: string;
    experimental?: Experimental;
    future?: NextConfig["future"];
    cli?: {
        clearConsoleOnBlitzDev?: boolean;
        httpProxy?: string;
        httpsProxy?: string;
        noProxy?: string;
    };
    log?: {
        level: "trace" | "debug" | "info" | "warn" | "error" | "fatal";
    };
    middleware?: Record<string, any> & {
        (req: any, res: any, next: any): Promise<void> | void;
        type?: string;
        config?: {
            cookiePrefix?: string;
        };
    }[];
    customServer?: {
        hotReload?: boolean;
    };
}
export interface BlitzConfigNormalized extends BlitzConfig {
    _meta: {
        packageName: string;
    };
}
export declare function getProjectRoot(): string;
export declare function getConfigSrcPath(): string;
declare global {
    namespace NodeJS {
        interface Global {
            blitzConfig: BlitzConfigNormalized;
        }
    }
}
/**
 * @param {boolean | undefined} reload - reimport config files to reset global cache
 */
export declare const getConfig: (reload?: boolean | undefined) => BlitzConfigNormalized;
export {};
